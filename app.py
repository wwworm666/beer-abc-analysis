from flask import Flask, render_template, request, jsonify
import pandas as pd
import json
from datetime import datetime, timedelta
from olap_reports import OlapReports
from data_processor import BeerDataProcessor
from abc_analysis import ABCAnalysis
from xyz_analysis import XYZAnalysis
from category_analysis import CategoryAnalysis

app = Flask(__name__)

# –°–ø–∏—Å–æ–∫ –±–∞—Ä–æ–≤
BARS = [
    "–ë–æ–ª—å—à–æ–π –ø—Ä. –í.–û",
    "–õ–∏–≥–æ–≤—Å–∫–∏–π",
    "–ö—Ä–µ–º–µ–Ω—á—É–≥—Å–∫–∞—è",
    "–í–∞—Ä—à–∞–≤—Å–∫–∞—è"
]

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html', bars=BARS)

@app.route('/api/analyze', methods=['POST'])
def analyze():
    """API endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        data = request.json
        bar_name = data.get('bar')
        days = int(data.get('days', 30))
        
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        print(f"   –ë–∞—Ä: {bar_name if bar_name else '–í–°–ï'}")
        print(f"   –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ iiko API
        olap = OlapReports()
        if not olap.connect():
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ iiko API'}), 500
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        date_to = datetime.now().strftime("%Y-%m-%d")
        date_from = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        
        report_data = olap.get_beer_sales_report(date_from, date_to, bar_name)
        olap.disconnect()
        
        if not report_data or not report_data.get('data'):
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}), 404
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processor = BeerDataProcessor(report_data)
        if not processor.prepare_dataframe():
            return jsonify({'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö'}), 500
        
        agg_data = processor.aggregate_by_beer_and_bar()
        
        # ABC –∞–Ω–∞–ª–∏–∑
        abc_analyzer = ABCAnalysis(agg_data)
        
        # XYZ –∞–Ω–∞–ª–∏–∑
        xyz_analyzer = XYZAnalysis(processor.df)
        
        if bar_name:
            # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∞—Ä–∞
            abc_result = abc_analyzer.perform_abc_analysis_by_bar(bar_name)
            xyz_result = xyz_analyzer.perform_xyz_analysis_by_bar(bar_name)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º ABC –∏ XYZ
            if not abc_result.empty and not xyz_result.empty:
                combined = abc_result.merge(
                    xyz_result[['Beer', 'XYZ_Category', 'CoefficientOfVariation']], 
                    on='Beer', 
                    how='left'
                )
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ XYZ –∫–∞–∫ Z (–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)
                combined['XYZ_Category'].fillna('Z', inplace=True)
                combined['CoefficientOfVariation'].fillna(100, inplace=True)
                
                # –ü–æ–ª–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ABC-XYZ
                combined['ABCXYZ_Combined'] = combined['ABC_Combined'] + '-' + combined['XYZ_Category']
                
                results = {bar_name: combined}
            else:
                results = {bar_name: abc_result}
        else:
            # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö –±–∞—Ä–æ–≤
            abc_results = abc_analyzer.perform_full_analysis()
            results = {}
            
            for bar, abc_df in abc_results.items():
                xyz_df = xyz_analyzer.perform_xyz_analysis_by_bar(bar)
                
                if not abc_df.empty and not xyz_df.empty:
                    combined = abc_df.merge(
                        xyz_df[['Beer', 'XYZ_Category', 'CoefficientOfVariation']], 
                        on='Beer', 
                        how='left'
                    )
                    combined['XYZ_Category'].fillna('Z', inplace=True)
                    combined['CoefficientOfVariation'].fillna(100, inplace=True)
                    combined['ABCXYZ_Combined'] = combined['ABC_Combined'] + '-' + combined['XYZ_Category']
                    results[bar] = combined
                else:
                    results[bar] = abc_df
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {}
        
        for bar, df in results.items():
            if df.empty:
                continue
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON-friendly —Ñ–æ—Ä–º–∞—Ç
            records = df.to_dict('records')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ABC –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            abc_stats = df['ABC_Combined'].value_counts().to_dict()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ XYZ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            xyz_stats = {}
            if 'XYZ_Category' in df.columns:
                xyz_stats = df['XYZ_Category'].value_counts().to_dict()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ABCXYZ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º
            abcxyz_stats = {}
            if 'ABCXYZ_Combined' in df.columns:
                abcxyz_stats = df['ABCXYZ_Combined'].value_counts().to_dict()
            
            # –¢–æ–ø –∏ —Ö—É–¥—à–∏–µ —Ñ–∞—Å–æ–≤–∫–∏
            top_beers = df.nlargest(10, 'TotalRevenue')[
                ['Beer', 'TotalRevenue', 'ABC_Combined'] + 
                (['XYZ_Category'] if 'XYZ_Category' in df.columns else [])
            ].to_dict('records')
            
            worst_beers = df.nsmallest(10, 'TotalRevenue')[
                ['Beer', 'TotalRevenue', 'ABC_Combined'] + 
                (['XYZ_Category'] if 'XYZ_Category' in df.columns else [])
            ].to_dict('records')
            
            response_data[bar] = {
                'records': records,
                'abc_stats': abc_stats,
                'xyz_stats': xyz_stats,
                'abcxyz_stats': abcxyz_stats,
                'top_beers': top_beers,
                'worst_beers': worst_beers,
                'total_beers': len(df),
                'total_revenue': float(df['TotalRevenue'].sum()),
                'total_qty': float(df['TotalQty'].sum())
            }
        
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500
@app.route('/api/weekly-chart/<bar_name>/<beer_name>', methods=['GET'])
def get_weekly_chart(bar_name, beer_name):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –∏–∑ –∫–µ—à–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–Ω–æ–≤–æ)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        import os
        if not os.path.exists('beer_report.json'):
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 404
        
        with open('beer_report.json', 'r', encoding='utf-8') as f:
            report_data = json.load(f)
        
        processor = BeerDataProcessor(report_data)
        if not processor.prepare_dataframe():
            return jsonify({'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏'}), 500
        
        xyz_analyzer = XYZAnalysis(processor.df)
        chart_data = xyz_analyzer.get_weekly_sales_chart_data(bar_name, beer_name)
        
        if not chart_data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞'}), 404
        
        return jsonify(chart_data)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/categories', methods=['POST'])
def analyze_categories():
    """API endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–∏–≤–∞"""
    try:
        data = request.json
        bar_name = data.get('bar')
        days = int(data.get('days', 30))

        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...")
        print(f"   –ë–∞—Ä: {bar_name if bar_name else '–í–°–ï'}")
        print(f"   –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ iiko API
        olap = OlapReports()
        if not olap.connect():
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ iiko API'}), 500

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        date_to = datetime.now().strftime("%Y-%m-%d")
        date_from = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")

        report_data = olap.get_beer_sales_report(date_from, date_to, bar_name)
        olap.disconnect()

        if not report_data or not report_data.get('data'):
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}), 404

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processor = BeerDataProcessor(report_data)
        if not processor.prepare_dataframe():
            return jsonify({'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö'}), 500

        agg_data = processor.aggregate_by_beer_and_bar()

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cat_analyzer = CategoryAnalysis(agg_data, processor.df)

        # XYZ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        xyz_analyzer = XYZAnalysis(processor.df)

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        summary = cat_analyzer.get_category_summary(bar_name)

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_results = {}

        if bar_name:
            # –î–ª—è –æ–¥–Ω–æ–≥–æ –±–∞—Ä–∞
            categories = cat_analyzer.get_categories(bar_name)

            for category in categories:
                result = cat_analyzer.analyze_category(category, bar_name)
                if result:
                    # –î–æ–±–∞–≤–ª—è–µ–º XYZ –¥–∞–Ω–Ω—ã–µ
                    result = cat_analyzer.add_xyz_to_category_analysis(
                        result, xyz_analyzer, bar_name
                    )
                    category_results[category] = result
        else:
            # –î–ª—è –≤—Å–µ—Ö –±–∞—Ä–æ–≤ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞—Ä–∞–º
            for bar in BARS:
                bar_results = {}
                categories = cat_analyzer.get_categories(bar)

                for category in categories:
                    result = cat_analyzer.analyze_category(category, bar)
                    if result:
                        result = cat_analyzer.add_xyz_to_category_analysis(
                            result, xyz_analyzer, bar
                        )
                        bar_results[category] = result

                if bar_results:
                    category_results[bar] = bar_results

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'summary': summary.to_dict('records'),
            'categories': category_results
        }

        return jsonify(response_data)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("\n" + "="*60)
    print("üç∫ BEER ABC/XYZ ANALYSIS")
    print("="*60)
    print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    print("üìç –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5000")
    print("\n‚ö†Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")
    
    app.run(debug=True, host='0.0.0.0', port=5000)