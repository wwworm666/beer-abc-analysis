import requests
import json
from datetime import datetime, timedelta
from core.iiko_api import IikoAPI

class OlapReports:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OLAP –æ—Ç—á–µ—Ç–∞–º–∏ iiko"""
    
    def __init__(self):
        self.api = IikoAPI()
        self.token = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"""
        if self.api.authenticate():
            self.token = self.api.token
            return True
        return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ç–æ–∫–µ–Ω"""
        self.api.logout()
    
    def get_beer_sales_report(self, date_from, date_to, bar_name=None):
        """
        –ü–æ–ª—É—á–∏—Ç—å OLAP –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –ø–∏–≤–∞

        date_from: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD')
        date_to: –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD')
        bar_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ä–∞ (–µ—Å–ª–∏ None, —Ç–æ –≤—Å–µ –±–∞—Ä—ã)
        """
        if not self.token:
            print("[ERROR] Snachala nuzhno podklyuchitsya (vizovite connect())")
            return None

        print(f"\n[OLAP] Zaprashivayu OLAP otchet po prodazham piva...")
        print(f"   Period: {date_from} - {date_to}")
        if bar_name:
            print(f"   Bar: {bar_name}")
        else:
            print(f"   Bar: VSE")

        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –∑–∞–ø—Ä–æ—Å –¥–ª—è OLAP v2
        request_body = self._build_olap_request(date_from, date_to, bar_name)

        url = f"{self.api.base_url}/v2/reports/olap"
        params = {"key": self.token}
        headers = {"Content-Type": "application/json"}

        try:
            response = requests.post(
                url,
                params=params,
                json=request_body,
                headers=headers
            )

            if response.status_code == 200:
                print("[OK] Otchet uspeshno poluchen!")
                return response.json()
            else:
                print(f"[ERROR] Oshibka polucheniya otcheta: {response.status_code}")
                print(f"   Otvet servera: {response.text}")
                return None

        except Exception as e:
            print(f"[ERROR] Oshibka: {e}")
            return None

    def get_draft_sales_report(self, date_from, date_to, bar_name=None):
        """
        –ü–æ–ª—É—á–∏—Ç—å OLAP –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ä–∞–∑–ª–∏–≤–Ω–æ–≥–æ –ø–∏–≤–∞

        date_from: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD')
        date_to: –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD')
        bar_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ä–∞ (–µ—Å–ª–∏ None, —Ç–æ –≤—Å–µ –±–∞—Ä—ã)
        """
        if not self.token:
            print("[ERROR] Snachala nuzhno podklyuchitsya (vizovite connect())")
            return None

        print(f"\n[OLAP] Zaprashivayu OLAP otchet po razlivnomu pivu...")
        print(f"   Period: {date_from} - {date_to}")
        if bar_name:
            print(f"   Bar: {bar_name}")
        else:
            print(f"   Bar: VSE")

        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –∑–∞–ø—Ä–æ—Å –¥–ª—è OLAP v2 (—Ä–∞–∑–ª–∏–≤–Ω–æ–µ)
        request_body = self._build_olap_request(date_from, date_to, bar_name, draft=True)

        url = f"{self.api.base_url}/v2/reports/olap"
        params = {"key": self.token}
        headers = {"Content-Type": "application/json"}

        try:
            response = requests.post(
                url,
                params=params,
                json=request_body,
                headers=headers
            )

            if response.status_code == 200:
                print("[OK] Otchet po razlivnomu uspeshno poluchen!")
                return response.json()
            else:
                print(f"[ERROR] Oshibka polucheniya otcheta: {response.status_code}")
                print(f"   Otvet servera: {response.text}")
                return None

        except Exception as e:
            print(f"[ERROR] Oshibka: {e}")
            return None

    def get_draft_sales_by_waiter_report(self, date_from, date_to, bar_name=None):
        """
        –ü–æ–ª—É—á–∏—Ç—å OLAP –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ä–∞–∑–ª–∏–≤–Ω–æ–≥–æ –ø–∏–≤–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞—Ö

        date_from: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD')
        date_to: –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD')
        bar_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ä–∞ (–µ—Å–ª–∏ None, —Ç–æ –≤—Å–µ –±–∞—Ä—ã)
        """
        if not self.token:
            print("[ERROR] Snachala nuzhno podklyuchitsya (vizovite connect())")
            return None

        print(f"\n[OLAP] Zaprashivayu OLAP otchet po razlivnomu pivu s oficiantami...")
        print(f"   Period: {date_from} - {date_to}")
        if bar_name:
            print(f"   Bar: {bar_name}")
        else:
            print(f"   Bar: VSE")

        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –∑–∞–ø—Ä–æ—Å –¥–ª—è OLAP v2 (—Ä–∞–∑–ª–∏–≤–Ω–æ–µ + –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã)
        request_body = self._build_olap_request(date_from, date_to, bar_name, draft=True, include_waiter=True)

        url = f"{self.api.base_url}/v2/reports/olap"
        params = {"key": self.token}
        headers = {"Content-Type": "application/json"}

        try:
            response = requests.post(
                url,
                params=params,
                json=request_body,
                headers=headers
            )

            if response.status_code == 200:
                print("[OK] Otchet po razlivnomu s oficiiantami uspeshno poluchen!")
                return response.json()
            else:
                print(f"[ERROR] Oshibka polucheniya otcheta: {response.status_code}")
                print(f"   Otvet servera: {response.text}")
                return None

        except Exception as e:
            print(f"[ERROR] Oshibka: {e}")
            return None
    
    def _build_olap_request(self, date_from, date_to, bar_name=None, draft=False, include_waiter=False):
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å JSON –∑–∞–ø—Ä–æ—Å –¥–ª—è OLAP –æ—Ç—á–µ—Ç–∞ v2

        draft: True - —Ä–∞–∑–ª–∏–≤–Ω–æ–µ –ø–∏–≤–æ, False - —Ñ–∞—Å–æ–≤–∞–Ω–Ω–æ–µ –ø–∏–≤–æ
        include_waiter: True - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞—Ö
        """

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –Ω–∞–ø–∏—Ç–∫–æ–≤
        drink_group = "–ù–∞–ø–∏—Ç–∫–∏ –†–æ–∑–ª–∏–≤" if draft else "–ù–∞–ø–∏—Ç–∫–∏ –§–∞—Å–æ–≤–∫–∞"

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        groupByRowFields = [
            "Store.Name",
            "DishName",
            "DishGroup.ThirdParent",
            "DishForeignName",
            "OpenDate.Typed"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if include_waiter:
            groupByRowFields.extend([
                "WaiterName",           # –û—Ñ–∏—Ü–∏–∞–Ω—Ç –±–ª—é–¥–∞
                "OrderWaiter.Name"      # –û—Ñ–∏—Ü–∏–∞–Ω—Ç –∑–∞–∫–∞–∑–∞
            ])

        request = {
            "reportType": "SALES",
            "groupByRowFields": groupByRowFields,
            "groupByColFields": [],
            "aggregateFields": [
                "DishAmountInt",
                "DishDiscountSumInt",
                "ProductCostBase.ProductCost",
                "ProductCostBase.MarkUp"
            ],
            "filters": {
                "OpenDate.Typed": {
                    "filterType": "DateRange",
                    "periodType": "CUSTOM",
                    "from": f"{date_from}",
                    "to": f"{date_to}"
                },
                "DishGroup.TopParent": {
                    "filterType": "IncludeValues",
                    "values": [drink_group]
                },
                "DeletedWithWriteoff": {
                    "filterType": "IncludeValues",
                    "values": ["NOT_DELETED"]
                },
                "OrderDeleted": {
                    "filterType": "IncludeValues",
                    "values": ["NOT_DELETED"]
                }
            }
        }

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∞—Ä, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if bar_name:
            request["filters"]["Store.Name"] = {
                "filterType": "IncludeValues",
                "values": [bar_name]
            }

        return request


# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üç∫ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ OLAP –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–∏–≤—É\n")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏
    olap = OlapReports()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if not olap.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        exit()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    date_to = datetime.now().strftime("%Y-%m-%d")
    date_from = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    report_data = olap.get_beer_sales_report(date_from, date_to)
    
    if report_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        with open("beer_report.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        print("\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: beer_report.json")
        print("   –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        if "data" in report_data and len(report_data["data"]) > 0:
            print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(report_data['data'])}")
            print("\n–ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:")
            for i, record in enumerate(report_data["data"][:3], 1):
                print(f"\n{i}. {record}")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    olap.disconnect()
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")