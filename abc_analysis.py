import pandas as pd
import numpy as np

class ABCAnalysis:
    """–ö–ª–∞—Å—Å –¥–ª—è ABC –∞–Ω–∞–ª–∏–∑–∞ (3 –±—É–∫–≤—ã)"""
    
    def __init__(self, aggregated_data):
        """
        aggregated_data: DataFrame —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        –ö–æ–ª–æ–Ω–∫–∏: Bar, Beer, Style, Country, TotalQty, TotalRevenue, TotalCost, AvgMarkupPercent, TotalMargin
        """
        self.data = aggregated_data.copy()
    
    def calculate_abc_category(self, series, ascending=False):
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ABC –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        
        series: pandas Series —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        ascending: True –µ—Å–ª–∏ –º–µ–Ω—å—à–µ = –ª—É—á—à–µ (–¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: Series —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ A, B, C
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        sorted_series = series.sort_values(ascending=ascending)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
        cumsum = sorted_series.cumsum()
        total = sorted_series.sum()
        cumulative_percent = (cumsum / total) * 100
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = pd.Series('C', index=series.index)
        
        # A = –ø–µ—Ä–≤—ã–µ 80% –æ—Ç —Å—É–º–º—ã
        categories[cumulative_percent <= 80] = 'A'
        # B = —Å–ª–µ–¥—É—é—â–∏–µ 15% (–æ—Ç 80% –¥–æ 95%)
        categories[(cumulative_percent > 80) & (cumulative_percent <= 95)] = 'B'
        # C = –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5% (–æ—Ç 95% –¥–æ 100%)
        categories[cumulative_percent > 95] = 'C'
        
        return categories
    
    def perform_abc_analysis_by_bar(self, bar_name):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å ABC –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞—Ä–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏:
        - ABC_Revenue (–ø–æ –≤—ã—Ä—É—á–∫–µ)
        - ABC_Markup (–ø–æ % –Ω–∞—Ü–µ–Ω–∫–∏)
        - ABC_Margin (–ø–æ –º–∞—Ä–∂–µ –≤ —Ä—É–±–ª—è—Ö)
        - ABC_Combined (—Ç—Ä–∏ –±—É–∫–≤—ã –≤–º–µ—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "ACA")
        """
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∞—Ä—É
        bar_data = self.data[self.data['Bar'] == bar_name].copy()
        
        if len(bar_data) == 0:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Ä–∞: {bar_name}")
            return pd.DataFrame()
        
        print(f"\nüîç ABC –∞–Ω–∞–ª–∏–∑ –¥–ª—è –±–∞—Ä–∞: {bar_name}")
        print(f"   –§–∞—Å–æ–≤–æ–∫: {len(bar_data)}")
        
        # 1-—è –±—É–∫–≤–∞: ABC –ø–æ –≤—ã—Ä—É—á–∫–µ (–±–æ–ª—å—à–µ = –ª—É—á—à–µ, ascending=False)
        bar_data['ABC_Revenue'] = self.calculate_abc_category(
            bar_data['TotalRevenue'], 
            ascending=False
        )
        
        # 2-—è –±—É–∫–≤–∞: ABC –ø–æ % –Ω–∞—Ü–µ–Ω–∫–∏ (–±–æ–ª—å—à–µ = –ª—É—á—à–µ, ascending=False)
        bar_data['ABC_Markup'] = self.calculate_abc_category(
            bar_data['AvgMarkupPercent'], 
            ascending=False
        )
        
        # 3-—è –±—É–∫–≤–∞: ABC –ø–æ –º–∞—Ä–∂–µ –≤ —Ä—É–±–ª—è—Ö (–±–æ–ª—å—à–µ = –ª—É—á—à–µ, ascending=False)
        bar_data['ABC_Margin'] = self.calculate_abc_category(
            bar_data['TotalMargin'], 
            ascending=False
        )
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∏ –±—É–∫–≤—ã
        bar_data['ABC_Combined'] = (
            bar_data['ABC_Revenue'] + 
            bar_data['ABC_Markup'] + 
            bar_data['ABC_Margin']
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        print(f"      1-—è –±—É–∫–≤–∞ (–í—ã—Ä—É—á–∫–∞):")
        print(f"         A: {(bar_data['ABC_Revenue'] == 'A').sum()} —à—Ç")
        print(f"         B: {(bar_data['ABC_Revenue'] == 'B').sum()} —à—Ç")
        print(f"         C: {(bar_data['ABC_Revenue'] == 'C').sum()} —à—Ç")
        
        print(f"\n      2-—è –±—É–∫–≤–∞ (% –ù–∞—Ü–µ–Ω–∫–∏):")
        print(f"         A: {(bar_data['ABC_Markup'] == 'A').sum()} —à—Ç")
        print(f"         B: {(bar_data['ABC_Markup'] == 'B').sum()} —à—Ç")
        print(f"         C: {(bar_data['ABC_Markup'] == 'C').sum()} —à—Ç")
        
        print(f"\n      3-—è –±—É–∫–≤–∞ (–ú–∞—Ä–∂–∞ —Ä—É–±):")
        print(f"         A: {(bar_data['ABC_Margin'] == 'A').sum()} —à—Ç")
        print(f"         B: {(bar_data['ABC_Margin'] == 'B').sum()} —à—Ç")
        print(f"         C: {(bar_data['ABC_Margin'] == 'C').sum()} —à—Ç")
        
        # –¢–æ–ø –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        print(f"\n   üèÜ –¢–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ABC:")
        top_combinations = bar_data['ABC_Combined'].value_counts().head(10)
        for combo, count in top_combinations.items():
            print(f"      {combo}: {count} —Ñ–∞—Å–æ–≤–æ–∫")
        
        return bar_data
    
    def perform_full_analysis(self):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å ABC –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö –±–∞—Ä–æ–≤
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: dict {bar_name: DataFrame}
        """
        bars = self.data['Bar'].unique()
        results = {}
        
        print("=" * 60)
        print("üç∫ ABC –ê–ù–ê–õ–ò–ó –ü–û –í–°–ï–ú –ë–ê–†–ê–ú")
        print("=" * 60)
        
        for bar in bars:
            results[bar] = self.perform_abc_analysis_by_bar(bar)
        
        print("\n" + "=" * 60)
        
        return results


# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç ABC –∞–Ω–∞–ª–∏–∑–∞\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    agg_data = pd.read_csv("aggregated_beer_data.csv", encoding='utf-8-sig')
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(agg_data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ABCAnalysis(agg_data)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    results = analyzer.perform_full_analysis()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞
    for bar_name, bar_result in results.items():
        if not bar_result.empty:
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            safe_name = bar_name.replace(" ", "_").replace(".", "")
            filename = f"abc_analysis_{safe_name}.csv"
            bar_result.to_csv(filename, index=False, encoding='utf-8-sig')
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {bar_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –±–∞—Ä–∞–º
    print("\n" + "=" * 60)
    print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú AAA, ACA –∏ —Ç.–¥.")
    print("=" * 60)
    
    all_results = pd.concat(results.values(), ignore_index=True)
    
    print("\n–¢–æ–ø-20 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ABC –ø–æ –≤—Å–µ–º –±–∞—Ä–∞–º:")
    top_all = all_results['ABC_Combined'].value_counts().head(20)
    for i, (combo, count) in enumerate(top_all.items(), 1):
        print(f"{i:2d}. {combo}: {count:3d} —Ñ–∞—Å–æ–≤–æ–∫")